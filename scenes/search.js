const { Scenes, Markup } = require("telegraf");
const { adminCheck } = require("../middlewares/adminCheck");

const searchScene = new Scenes.BaseScene("search");

searchScene.enter((ctx) => {
  ctx.reply(
    "üîé –î–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ö–û–î —Ñ–∏–ª—å–º–∞/—Å–µ—Ä–∏–∞–ª–∞",
    Markup.removeKeyboard(true)
  );
});

searchScene.command("change_channels", adminCheck, (ctx) => {
  ctx.scene.enter("changeChannels");
});

searchScene.on("text", (ctx) => {
  ctx.reply(
    "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã –Ω–∏–∂–µ:",
    Markup.inlineKeyboard([
      ...ctx.session.channels.map((channel) => [
        Markup.button.url(channel.text, channel.url),
      ]),
      [Markup.button.callback("–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", "subscribed")],
    ])
      .oneTime()
      .resize()
  );
});

searchScene.action("subscribed", async (ctx) => {
  const userId = ctx.from.id;
  const channels = ctx.session.channels;
  const notSubscribedChannels = [];

  for (const channel of channels) {
    try {
      const chatMember = await ctx.telegram.getChatMember(channel.id, userId);
      console.log("C—Ç–∞—Ç—É", chatMember);
      if (chatMember.status === "left" || chatMember.status === "kicked") {
        notSubscribedChannels.push(channel);
      }
    } catch (error) {
      console.error(
        `Error checking subscription for channel ${channel.id}:`,
        error
      );
    }
  }

  if (notSubscribedChannels.length === 0) {
    ctx.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!");
  } else {
    ctx.reply("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:");
    notSubscribedChannels.forEach((channel) => {
      ctx.reply(`${channel.text}: ${channel.url}`);
    });
    console.log(
      "–ö–∞–Ω–∞–ª—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω:",
      notSubscribedChannels
    );
  }
});
module.exports = { searchScene };

const { Composer, Markup } = require("telegraf");
const Channel = require("../models/channelModel");
const Link = require("../models/linkModel");
const { saveLastMessage } = require("../utils");
const adminBot = require("./admin");
const { notifyAdmins } = require("../utils");
const userBot = new Composer();

userBot.start(async (ctx) => {
  await ctx.reply(
    "üîé –î–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ö–û–î —Ñ–∏–ª—å–º–∞/—Å–µ—Ä–∏–∞–ª–∞"
  );
});

userBot.on("text", async (ctx) => {
  await sendChannelList(ctx);
});

userBot.action("subscribed", async (ctx) => {
  const userId = ctx.from.id;
  const channels = await Channel.find({});

  const remainingChannels = [];

  for (const channel of channels) {
    if (channel.isAdmin) {
      try {
        const member = await ctx.telegram.getChatMember(channel.id, userId);
        if (["member", "administrator", "creator"].includes(member.status)) {
          continue;
        } else {
          remainingChannels.push(channel);
        }
      } catch (error) {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–∞–ª–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await Channel.updateOne(
          { _id: channel._id },
          { $set: { isAdmin: false } }
        );

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        const message = `‚ö†Ô∏è –ë–æ—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∫–∞–Ω–∞–ª–∞ ${
          channel.title || channel.id
        } –∏ —Ç–µ–ø–µ—Ä—å –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.`;
        await notifyAdmins(message, ctx);

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∂–µ
        continue;
      }
    }
  }

  if (remainingChannels.length > 0) {
    await sendChannelList(ctx, remainingChannels);
  } else {
    const linkDoc = await Link.findById("link");
    const lastMessage = await ctx.reply(
      `–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã! –í —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞: ${linkDoc.customLink}`
    );
    await saveLastMessage(ctx, lastMessage);
  }
});

async function sendChannelList(ctx, channels) {
  if (!channels) {
    channels = await Channel.find({});
  }

  const buttons = [];
  for (let i = 0; i < channels.length; i += 2) {
    const row = [];
    if (channels[i]) {
      row.push(Markup.button.url(channels[i].title, channels[i].url));
    }
    if (channels[i + 1]) {
      row.push(Markup.button.url(channels[i + 1].title, channels[i + 1].url));
    }
    buttons.push(row);
  }

  buttons.push([Markup.button.callback("–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", "subscribed")]);

  const lastMessage = await ctx.reply(
    "üìù –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞, –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:",
    Markup.inlineKeyboard(buttons)
  );
  await saveLastMessage(ctx, lastMessage);
}

module.exports = userBot;
